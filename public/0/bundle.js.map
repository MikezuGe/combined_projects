{"version":3,"sources":["webpack:///./public/tests/src/Voronoi.js"],"names":["__webpack_require__","r","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","components_utility__WEBPACK_IMPORTED_MODULE_1__","Vec2","math","random","floor","min","PI","Math","fullCircle","colors","Voronoi","canvasRef","useRef","voronoiX","setVoronoiX","useState","voronoiY","setVoronoiY","grid","setGrid","useEffect","canvas","current","ctx","getContext","width","height","voronoiPoints","cols","rows","Array","fill","map","undefined","i","x","y","VoronoiPoints","p","color","length","c","parseInt","slice","g","b","getTileAndSurroundingTiles","pos","filter","imageData","createImageData","data","dl","pixelDistances","longestDistance","ii","pixel","dist","reduce","shortest","point","Infinity","push","forEach","pd","hue","beginPath","moveTo","lineTo","arc","fillStyle","strokeStyle","putImageData","stroke","a","createElement","ref","window","innerWidth","innerHeight","style","background","position","right","top","display","flexDirection","padding","htmlFor","id","type","onChange","target","value","max","checked"],"mappings":"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","file":"0/bundle.js","sourcesContent":["import React, { useState, useEffect, useRef, } from 'react';\nimport { math, } from 'components/utility';\nconst { Vec2, } = math;\n\n\nconst {\n  random,\n  floor,\n  min,\n  PI,\n} = Math;\n\nconst radius = 2;\nconst fullCircle = PI * 2;\n\nconst colors = [\n  'ff0000',\n  '00ff00',\n  '0000ff',\n  'ffff00',\n  '00ffff',\n  'ff00ff',\n];\n\nconst VoronoiPoints = ({ cols, rows, }) => new Array(cols * rows).fill().map((undefined, i) => {\n  const x = i % cols / cols + random() / cols;\n  const y = floor(i / cols) / rows + random() / rows;\n  return Vec2({\n    x,\n    y,\n  });\n});\n\n\nconst Voronoi = () => {\n  const canvasRef = useRef();\n  const [ voronoiX, setVoronoiX, ] = useState(4);\n  const [ voronoiY, setVoronoiY, ] = useState(4);\n  const [ grid, setGrid, ] = useState(true);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    const { width, height, } = canvas;\n\n    const voronoiPoints = VoronoiPoints({\n      cols: voronoiX,\n      rows: voronoiY,\n    }).map((p, i) => {\n      const color = colors[i % colors.length];\n      p.x *= width;\n      p.y *= height;\n      p.c = {\n        r: parseInt(color.slice(0, 2), 16),\n        g: parseInt(color.slice(2, 4), 16),\n        b: parseInt(color.slice(4, 6), 16),\n      };\n      return p;\n    });\n\n    const getTileAndSurroundingTiles = ({ x, y, }) => {\n      const pos = floor(x / width * voronoiX) + floor(y / height * voronoiY) * voronoiX;\n      return [\n        voronoiPoints[pos - voronoiX - 1],\n        voronoiPoints[pos - voronoiX + 0],\n        voronoiPoints[pos - voronoiX + 1],\n        voronoiPoints[pos - 1],\n        voronoiPoints[pos + 0],\n        voronoiPoints[pos + 1],\n        voronoiPoints[pos + voronoiX - 1],\n        voronoiPoints[pos + voronoiX + 0],\n        voronoiPoints[pos + voronoiX + 1],\n      ].filter(p => p);\n    };\n\n    const imageData = ctx.createImageData(width, height);\n    const data = imageData.data;\n    const dl = data.length;\n    /*\n    // Color around voronoi points\n    for (let i = 0; i < dl; i+=4) {\n      const ii = i / 4;\n      const pixel = Vec2({\n        x: ii % width,\n        y: floor(ii / width),\n      });\n      let closestDist = null;\n      let closestPoint = null;\n      getTileAndSurroundingTiles(pixel).forEach(point => {\n        const dist = point.dist(pixel);\n        if (!closestDist || closestDist > dist) {\n          closestDist = dist;\n          closestPoint = point;\n        }\n      });\n\n      data[i + 0] = closestPoint.c.r;\n      data[i + 1] = closestPoint.c.g;\n      data[i + 2] = closestPoint.c.b;\n      data[i + 3] = 255;\n    }\n    */\n\n    // Hue around voronoipoints\n    const pixelDistances = [];\n    let longestDistance = 0;\n    for (let i = 0; i < dl; i+=4) {\n      const ii = i / 4;\n      const pixel = Vec2({\n        x: ii % width,\n        y: floor(ii / width),\n      });\n      const dist = min(getTileAndSurroundingTiles(pixel).reduce((shortest, point) => {\n        const dist = point.dist(pixel);\n        return dist < shortest ? dist : shortest;\n      }, Infinity));\n      dist > longestDistance && (longestDistance = dist);\n      pixelDistances.push(dist);\n    }\n    pixelDistances.forEach((pd, i) => {\n      const ii = i * 4;\n      const hue = floor(pd / longestDistance * 255);\n      data[ii + 0] = hue;\n      data[ii + 1] = hue;\n      data[ii + 2] = hue;\n      data[ii + 3] = 255;\n    });\n    \n    // Draw grid and voronoi points\n    ctx.beginPath();\n    // Grid\n    if (grid) {\n      for(let i = 1; i < voronoiY; i++) {\n        const y = height / voronoiY * i;\n        ctx.moveTo(0, y);\n        ctx.lineTo(width, y);\n      }\n      for(let i = 1; i < voronoiX; i++) {\n        const x = width / voronoiX * i;\n        ctx.moveTo(x, 0);\n        ctx.lineTo(x, height);\n      }\n    }\n    // Voronoipoints\n    voronoiPoints.forEach(p => {\n      ctx.moveTo(p.x + radius, p.y);\n      ctx.arc(p.x, p.y, radius, 0, fullCircle);\n    });\n    ctx.fillStyle = '#ff0000';\n    ctx.strokeStyle = '#ff0000';\n    ctx.putImageData(imageData, 0, 0);\n    ctx.fill();\n    ctx.stroke();\n\n  }, [ voronoiX, voronoiY, grid, ]);\n\n  return (\n    <div>\n      <canvas\n        ref={canvasRef}\n        width={window.innerWidth}\n        height={window.innerHeight}\n        style={{ background: '#ddd', }}\n      />\n      <div\n        style={{\n          position: 'absolute',\n          right: '0',\n          top: '0',\n          display: 'flex',\n          flexDirection: 'column',\n          padding: '5px',\n        }}\n      >\n        <div>\n          <label htmlFor={'voronoiX'}>{'Voronoi X: '}</label>\n          <input\n            id={'voronoiX'}\n            type={'number'}\n            onChange={({ target: { value, }, }) => setVoronoiX(parseInt(value) || 1)}\n            value={voronoiX}\n            min={1}\n            max={50}\n          />\n        </div>\n        <div>\n          <label htmlFor={'voronoiY'}>{'Voronoi Y: '}</label>\n          <input\n            id={'voronoiY'}\n            type={'number'}\n            onChange={({ target: { value, }, }) => setVoronoiY(parseInt(value) || 1)}\n            value={voronoiY}\n            min={1}\n            max={50}\n          />\n        </div>\n        <div>\n          <label htmlFor={'grid'}>{'Show grid'}</label>\n          <input\n            id={'grid'}\n            type={'checkbox'}\n            onChange={({ target: { checked, }, }) => setGrid(checked)}\n            checked={grid}\n            min={1}\n            max={50}\n          />\n        </div>\n      </div>\n    </div>\n  );\n};\n\n\nexport default Voronoi;\n"],"sourceRoot":""}