!function(t){var e={};function i(o){if(e[o])return e[o].exports;var n=e[o]={i:o,l:!1,exports:{}};return t[o].call(n.exports,n,n.exports,i),n.l=!0,n.exports}i.m=t,i.c=e,i.d=function(t,e,o){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(i.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)i.d(o,n,function(e){return t[e]}.bind(null,n));return o},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=57)}({57:function(t,e,i){"use strict";i.r(e);class o{constructor(){this.cell=null}die(){this.cell.removeEntity()}}const{random:n,floor:r}=Math,s=(t,e)=>r(n()*(e-t))+t,a="ENTITY_PLANT";class h extends o{constructor(){super(),this.size=2,this.timeToLive=s(this.TIME_TO_LIVE_MIN,this.TIME_TO_LIVE_MAX),this.timeToCanGrow=s(this.TIME_TO_GROW_MIN,this.TIME_TO_GROW_MAX),this.timeToCanBreed=s(this.TIME_TO_BREED_MIN,this.TIME_TO_BREED_MAX)}grow(){this.size<this.ENTITY_MAX_SIZE&&(this.size++,this.timeToCanGrow=s(this.TIME_TO_GROW_MIN,this.TIME_TO_GROW_MAX))}breed(){const t=this.cell.getEmptyAdjacentCell();t&&(t.setEntity(new this.constructor),this.size-=this.SHRINK_ON_BREED,this.timeToCanBreed=s(this.TIME_TO_BREED_MIN,this.TIME_TO_BREED_MAX))}update(){if(--this.timeToLive<=0)return this.die();this.timeToCanGrow<=0?this.grow():this.timeToCanGrow--,this.timeToCanBreed<=0?this.breed():this.timeToCanBreed--}}h.prototype.ENTITY_TYPE=a,h.prototype.ENTITY_COLOR=0,h.prototype.TIME_TO_LIVE_MIN=800,h.prototype.TIME_TO_LIVE_MAX=1e3,h.prototype.TIME_TO_GROW_MIN=10,h.prototype.TIME_TO_GROW_MAX=20,h.prototype.TIME_TO_BREED_MIN=50,h.prototype.TIME_TO_BREED_MAX=100,h.prototype.ENTITY_MAX_SIZE=10,h.prototype.SIZE_TO_BREED=6,h.prototype.SHRINK_ON_BREED=4;const{random:_,floor:l}=Math,T=(t,e)=>l(_()*(e-t))+t;class E extends o{constructor(){super(),this.size=2,this.satiation=3,this.timeToLive=T(this.TIME_TO_LIVE_MIN,this.TIME_TO_LIVE_MAX),this.timeToCanGrow=T(this.TIME_TO_GROW_MIN,this.TIME_TO_GROW_MAX),this.timeToCanBreed=T(this.TIME_TO_BREED_MIN,this.TIME_TO_BREED_MAX),this.timeToCanMove=T(this.TIME_TO_MOVE_MIN,this.TIME_TO_MOVE_MAX),this.timeToSatiationDecrease=T(this.TIME_SATIATION_DECREASE_MIN,this.TIME_SATIATION_DECREASE_MAX),this.direction=null}getHungrier(){this.satiation--,this.satiation<=0?this.timeToLive=0:this.timeToSatiationDecrease=T(this.TIME_SATIATION_DECREASE_MIN,this.TIME_SATIATION_DECREASE_MAX)}findFood(){let t=null,e=1/0;for(let i=0;i<4;i++){let o=1,n=this.cell.adjacentCells[i];if(n)for(;n=n.adjacentCells[i];)if(o++,n.entity){if(n.entity.ENTITY_TYPE!==a)break;o<e&&(e=o,t=i)}}if(e<1/0)return t}move(){const t=this.cell.adjacentCells[this.direction];t?t.entity?t.entity.ENTITY_TYPE===a&&this.eat(t):this.cell.moveEntityTo(t):this.direction=null}eat(t){this.satiation+=l(t.entity.size/3)+1,this.timeToSatiationDecrease=T(this.TIME_SATIATION_DECREASE_MIN,this.TIME_SATIATION_DECREASE_MAX),this.cell.moveEntityTo(t),this.direction=null}grow(){this.size>=this.ENTITY_MAX_SIZE||(this.size++,this.timeToCanGrow=T(this.TIME_TO_GROW_MIN,this.TIME_TO_GROW_MAX))}breed(){const t=this.cell.getEmptyAdjacentCell();t&&(t.setEntity(new this.constructor),this.size-=this.SHRINK_ON_BREED,this.timeToCanBreed=T(this.TIME_TO_BREED_MIN,this.TIME_TO_BREED_MAX))}update(){if(this.timeToSatiationDecrease<=0?this.getHungrier():this.timeToSatiationDecrease--,--this.timeToLive<=0)return this.die();this.timeToCanGrow<=0?this.grow():this.timeToCanGrow--,this.timeToCanBreed<=0?this.breed():this.timeToCanBreed--,this.timeToCanMove>0&&this.timeToCanMove--,this.satiation<=this.SATIATION_TO_EAT&&(this.direction||(this.direction=this.findFood()),this.timeToCanMove<=0&&this.move())}}E.prototype.ENTITY_TYPE="ENTITY_HERBIVORE",E.prototype.ENTITY_COLOR=1,E.prototype.TIME_TO_LIVE_MIN=3e3,E.prototype.TIME_TO_LIVE_MAX=3500,E.prototype.TIME_TO_GROW_MIN=100,E.prototype.TIME_TO_GROW_MAX=140,E.prototype.TIME_TO_BREED_MIN=600,E.prototype.TIME_TO_BREED_MAX=800,E.prototype.TIME_TO_MOVE_MIN=40,E.prototype.TIME_TO_MOVE_MAX=50,E.prototype.TIME_SATIATION_DECREASE_MIN=80,E.prototype.TIME_SATIATION_DECREASE_MAX=100,E.prototype.SATIATION_TO_EAT=8,E.prototype.ENTITY_MAX_SIZE=10,E.prototype.SIZE_TO_BREED=8,E.prototype.SHRINK_ON_BREED=5;const c={ENTITY_PLANT:a,ENTITY_HERBIVORE:"ENTITY_HERBIVORE"},{ENTITY_PLANT:d,ENTITY_HERBIVORE:f}=c,{random:u,floor:I}=Math;class p{constructor(t,e,i){this.cellNumber=t,this.cellType=e,this.renderingPosition=i,this.adjacentCells=[],this.entity=null}getEmptyAdjacentCell(){const{adjacentCells:t,entity:{ENTITY_TYPE:e}}=this,i=t.filter(t=>{if(!t)return!1;if(!t.entity)return!0;switch(e){case f:return t.entity.ENTITY_TYPE===d;default:return!1}});return i.length?i[I(u()*i.length)]:null}moveEntityTo(t){const e=this.entity;this.removeEntity(),t.setEntity(e)}setEntity(t){this.entity&&this.removeEntity(),t.cell=this,this.entity=t}removeEntity(){this.entity.cell=null,this.entity=null}update(){this.entity&&this.entity.update()}}const{floor:y}=Math;const M=document.createElement("canvas"),A=M.getContext("webgl2");document.getElementById("root").appendChild(M);const m=A.createShader(A.VERTEX_SHADER),O=A.createShader(A.FRAGMENT_SHADER);A.shaderSource(m,"#version 300 es\nin vec2 a_position;\nin float a_color;\nin float a_alpha;\nin float a_size;\n\nvec3 getColor () {\n  switch (int(a_color)) {\n    case 0: return vec3(0.0, 1.0, 0.0);\n    case 1: return vec3(1.0, 0.75, 0.8);\n    case 2: return vec3(1.0, 0.0, 0.0);\n    default: return vec3(0.0, 0.0, 0.0);\n  }\n}\n\nout vec4 color;\nvoid main () {\n  color = vec4(getColor(), a_alpha);\n  gl_Position = vec4(a_position.x, -a_position.y, 0.0, 1.0);\n  gl_PointSize = a_size;\n}\n"),A.shaderSource(O,"#version 300 es\nprecision mediump float;\n\nin vec4 color;\n\nout vec4 fragColor;\nvoid main () {\n  if (color.w == 0.0) {\n    discard;\n  }\n  vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n  float r = dot(cxy, cxy);\n  if (r > 1.0) {\n    discard;\n  }\n  float delta = fwidth(r);\n  float alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n  fragColor = vec4(color.xyz * alpha, color.w);\n}\n"),A.compileShader(m),A.compileShader(O);const R=A.getShaderInfoLog(m);console.log("vs compile err: ",R);const g=A.getShaderInfoLog(O);console.log("fs compile err: ",g);const N=A.createProgram();A.attachShader(N,m),A.attachShader(N,O),A.linkProgram(N),A.useProgram(N);(t=>{const e=document.createElement("style");e.type="text/css",(document.head||document.getElementsByTagName("head")[0]).appendChild(e),t||(t="\n    * {\n      font-family: 'Ubuntu', sans-serif;\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n      font-size: 16px;\n    }\n    \n    html body {\n      height: 100vh;\n      width: 100vw;\n      overflow: hidden;\n    }\n    \n    #root {\n      width: 100%;\n      height: 100%;\n    }\n    \n    canvas {\n      //width: 100%;\n      //height: 100%;\n      background: gray;\n    }\n    "),e.styleSheet?e.styleSheet.cssText=t:e.appendChild(document.createTextNode(t))})("\n* {\n  font-family: 'Ubuntu', sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-size: 16px;\n}\n\nhtml body {\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n}\n\ncanvas {\n  //width: 100%;\n  //height: 100%;\n  background: gray;\n}\n"),window.addEventListener("keyup",t=>{"p"===t.key?v+=v<20?1:0:"o"===t.key&&(v-=v>0?1:0)},!1);let v=3;const b=new class{constructor(t,e){if(t<3||e<3)throw new Error("Too small world, must be at least 3x3");this.width=t,this.height=e,this.dimension=t*e,this.field=[],this.setupFieldCells(),this.field[0].setEntity(new h),setTimeout(()=>{this.field[100].setEntity(new E)},1e4)}setupFieldCells(){const{field:t,width:e,height:i,dimension:o,getCellType:n}=this;for(let r=0;r<o;r++)t[r]=new p(r,n(r,e,o),{x:(r%e*10+5)/10/e*2-1,y:(10*y(r/e)+5)/10/i*2-1});for(let i=0;i<o;i++)t[i].adjacentCells.push(t[i-e]?t[i-e]:null,(i+1)%e!=0&&t[i+1]?t[i+1]:null,t[i+e]?t[i+e]:null,i%e!=0&&t[i-1]?t[i-1]:null)}getCellType(t,e,i){return 0===t?"top-left":t+1===e?"top-right":t+e===i?"bottom-left":t+1===i?"bottom-right":t<e?"top":t+e+1>i?"bottom":t%e==0?"left":(t+1)%e==0?"right":"normal"}update(){const{field:t}=this;for(const e of t)e.update()}}(50,50),C=new class{constructor(){this.vertices=[],this.varying=[],this.positionBuffer=A.createBuffer(),this.varyingBuffer=A.createBuffer(),this.vertexAttributes={a_position:{buffer:this.positionBuffer,attribute:A.getAttribLocation(N,"a_position"),type:A.FLOAT,size:2,stride:8,offset:0},a_color:{buffer:this.varyingBuffer,attribute:A.getAttribLocation(N,"a_color"),type:A.FLOAT,size:1,stride:12,offset:0},a_alpha:{buffer:this.varyingBuffer,attribute:A.getAttribLocation(N,"a_alpha"),type:A.FLOAT,size:1,stride:12,offset:4},a_size:{buffer:this.varyingBuffer,attribute:A.getAttribLocation(N,"a_size"),type:A.FLOAT,size:1,stride:12,offset:8}}}setupWorldRender({width:t,height:e,field:i}){M.width=10*t,M.height=10*e,A.viewport(0,0,M.width,M.height);const{vertices:o,varying:n}=this;for(const{renderingPosition:t}of i)o.push(t.x,t.y),n.push(0,0,0);A.bindBuffer(A.ARRAY_BUFFER,this.positionBuffer),A.bufferData(A.ARRAY_BUFFER,new Float32Array(o),A.STATIC_DRAW),A.bindBuffer(A.ARRAY_BUFFER,this.varyingBuffer),A.bufferData(A.ARRAY_BUFFER,new Float32Array(n),A.DYNAMIC_DRAW);for(const{buffer:t,attribute:e,size:i,type:o,stride:n,offset:r}of Object.values(this.vertexAttributes))A.bindBuffer(A.ARRAY_BUFFER,t),A.enableVertexAttribArray(e),A.vertexAttribPointer(e,i,o,!1,n,r)}renderWorld({field:t,dimension:e}){A.clearColor(.4,.4,.4,1),A.clear(A.COLOR_BUFFER_BIT|A.DEPTH_BUFFER_BIT);const{varying:i}=this;for(const{entity:e,cellNumber:o}of t){const t=3*o;e?(i[t+0]=e.ENTITY_COLOR,i[t+1]=1,i[t+2]=e.size):i[t+1]=0}A.bufferData(A.ARRAY_BUFFER,new Float32Array(i),A.DYNAMIC_DRAW),A.drawArrays(A.POINTS,0,e)}};C.setupWorldRender(b);const B=()=>{requestAnimationFrame(B);for(let t=0;t<v;t++)b.update();C.renderWorld(b)};requestAnimationFrame(B)}});