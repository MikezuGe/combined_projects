{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/evolution/src/Entities/Entity.js","webpack:///./public/evolution/src/Entities/Plant.js","webpack:///./public/evolution/src/Entities/Herbivore.js","webpack:///./public/evolution/src/Entities/index.js","webpack:///./public/evolution/src/Cell.js","webpack:///./public/evolution/src/World.js","webpack:///./public/evolution/src/Renderer/Renderer.js","webpack:///./public/evolution/src/utility/setGlobalStyle.js","webpack:///./public/evolution/src/app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Entity","constructor","this","cell","die","removeEntity","random","floor","Math","randomize","min","max","ENTITY_TYPE","Plant","super","size","timeToLive","TIME_TO_LIVE_MIN","TIME_TO_LIVE_MAX","timeToCanGrow","TIME_TO_GROW_MIN","TIME_TO_GROW_MAX","timeToCanBreed","TIME_TO_BREED_MIN","TIME_TO_BREED_MAX","grow","ENTITY_MAX_SIZE","breed","breedTo","getEmptyAdjacentCell","setEntity","SHRINK_ON_BREED","update","ENTITY_COLOR","SIZE_TO_BREED","Herbivore_random","Herbivore","satiation","direction","findFood","closest","Infinity","nextCell","adjacentCells","distance","entity","ENTITY_PLANT","move","eat","SATIATION_TO_EAT","entityTypes","ENTITY_HERBIVORE","Cell_random","Cell","cellNumber","cellType","renderingPosition","openCells","filter","length","canvas","document","createElement","gl","getContext","getElementById","appendChild","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","shaderSource","compileShader","verr","getShaderInfoLog","console","log","ferr","program","createProgram","attachShader","linkProgram","useProgram","css","style","type","head","getElementsByTagName","styleSheet","cssText","createTextNode","setGlobalStyle","window","addEventListener","e","updTime","world","width","height","Error","dimension","field","setupFieldCells","setTimeout","getCellType","x","y","renderer","vertices","varying","positionBuffer","createBuffer","varyingBuffer","vertexAttributes","a_position","buffer","attribute","getAttribLocation","FLOAT","stride","offset","a_color","a_alpha","a_size","setupWorldRender","viewport","push","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","DYNAMIC_DRAW","values","enableVertexAttribArray","vertexAttribPointer","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","renderWorld","pos","drawArrays","POINTS","frame","requestAnimationFrame"],"mappings":"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","file":"evolution/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 55);\n","export default class Entity {\n\n  constructor () {\n    this.cell = null;\n  }\n\n  die () {\n    this.cell.removeEntity();\n  }\n\n}\n","import Entity from './Entity';\n\n\nconst { random, floor, } = Math;\nconst randomize = (min, max) => floor(random() * (max - min)) + min;\n\n\nexport const ENTITY_TYPE = 'ENTITY_PLANT';\n\n\nexport default class Plant extends Entity {\n\n  constructor () {\n    super();\n    this.size = 2;\n    this.timeToLive = randomize(this.TIME_TO_LIVE_MIN, this.TIME_TO_LIVE_MAX);\n    this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\n    this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\n  }\n\n  grow () {\n    if (this.size < this.ENTITY_MAX_SIZE) {\n      this.size++;\n      this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\n    }\n  }\n\n  breed () {\n    const breedTo = this.cell.getEmptyAdjacentCell();\n    if (breedTo) {\n      breedTo.setEntity(new this.constructor());\n      this.size -= this.SHRINK_ON_BREED;\n      this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\n    }\n  }\n\n  update () {\n    if (--this.timeToLive <= 0) return this.die();\n    this.timeToCanGrow <= 0 ? this.grow() : this.timeToCanGrow--;\n    this.timeToCanBreed <= 0 ? this.breed() : this.timeToCanBreed--;\n  }\n\n}\n\nPlant.prototype.ENTITY_TYPE = ENTITY_TYPE;\nPlant.prototype.ENTITY_COLOR = 0;\nPlant.prototype.TIME_TO_LIVE_MIN = 800;\nPlant.prototype.TIME_TO_LIVE_MAX = 1000;\nPlant.prototype.TIME_TO_GROW_MIN = 10;//80;\nPlant.prototype.TIME_TO_GROW_MAX = 20;//120;\nPlant.prototype.TIME_TO_BREED_MIN = 50;//100;\nPlant.prototype.TIME_TO_BREED_MAX = 100;//500;\n\nPlant.prototype.ENTITY_MAX_SIZE = 10;\nPlant.prototype.SIZE_TO_BREED = 6;\nPlant.prototype.SHRINK_ON_BREED = 4;\n","import Entity from './Entity';\nimport { ENTITY_TYPE as ENTITY_PLANT, } from './Plant';\n\n\nconst { random, floor, } = Math;\nconst randomize = (min, max) => floor(random() * (max - min)) + min;\n\n\nexport const ENTITY_TYPE = 'ENTITY_HERBIVORE';\n\n\nexport default class Herbivore extends Entity {\n\n  constructor () {\n    super();\n    this.size = 2;\n    this.satiation = 3;\n    this.timeToLive = randomize(this.TIME_TO_LIVE_MIN, this.TIME_TO_LIVE_MAX);\n    this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\n    this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\n\n    this.direction = null;\n  }\n\n  findFood () {\n    let direction = null;\n    let closest = Infinity;\n    for (let i = 0; i < 4; i++) {\n      let nextCell = this.adjacentCells[i];\n      let distance = 1;\n      if (!nextCell) continue;\n      while ((nextCell = nextCell.adjacentCells[i])) {\n        distance++;\n        if (!nextCell.entity) continue;\n        if (nextCell.entity.ENTITY_TYPE === ENTITY_PLANT) {\n          if (distance < closest) {\n            closest = distance\n            direction = i;\n          }\n        } else {\n          break;\n        }\n      }\n    }\n    if (closest < Infinity) return direction;\n  }\n\n  move () {\n\n  }\n\n  eat () {\n\n  }\n\n  grow () {\n    if (this.size < this.ENTITY_MAX_SIZE) {\n      this.size++;\n      this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\n    }\n  }\n\n  breed () {\n    const breedTo = this.cell.getEmptyAdjacentCell();\n    if (breedTo) {\n      breedTo.setEntity(new this.constructor());\n      this.size -= this.SHRINK_ON_BREED;\n      this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\n    }\n  }\n\n  update () {\n    if (--this.timeToLive <= 0) return this.die();\n    \n    // Get hungrier\n    \n    this.timeToCanGrow <= 0 ? this.grow() : this.timeToCanGrow--;\n    this.timeToCanBreed <= 0 ? this.breed() : this.timeToCanBreed--;\n    \n    if (this.direction) {\n      this.move();\n    } else if (this.satiation < this.SATIATION_TO_EAT) {\n      this.direction = this.findFood();\n      this.move();\n    }\n  }\n\n}\n\nHerbivore.prototype.ENTITY_TYPE = ENTITY_TYPE;\nHerbivore.prototype.ENTITY_COLOR = 1;\nHerbivore.prototype.TIME_TO_LIVE_MIN = 3000;\nHerbivore.prototype.TIME_TO_LIVE_MAX = 3500;\nHerbivore.prototype.TIME_TO_GROW_MIN = 150;\nHerbivore.prototype.TIME_TO_GROW_MAX = 200;\nHerbivore.prototype.TIME_TO_BREED_MIN = 800;\nHerbivore.prototype.TIME_TO_BREED_MAX = 1000;\n\nHerbivore.prototype.SATIATION_TO_EAT = 8;\n\nHerbivore.prototype.ENTITY_MAX_SIZE = 10;\nHerbivore.prototype.SIZE_TO_BREED = 8;\nHerbivore.prototype.SHRINK_ON_BREED = 5;\n","export { default as Plant, } from './Plant'\nexport { default as Herbivore, } from './Herbivore'\n//export { default as Carnivore, } from './Carnivore'\n\n\nimport { ENTITY_TYPE as ENTITY_PLANT, } from './Plant';\nimport { ENTITY_TYPE as ENTITY_HERBIVORE, } from './Herbivore';\n//import { ENTITY_TYPE as ENTITY_CARNIVORE, } from './Carnivore';\n\n\nexport const entityTypes = {\n  ENTITY_PLANT,\n  ENTITY_HERBIVORE,\n  //ENTITY_CARNIVORE,\n};\n","import { entityTypes, } from './Entities';\nconst {\n  ENTITY_PLANT,\n  ENTITY_HERBIVORE,\n  //ENTITY_CARNIVORE,\n} = entityTypes;\n\n\nconst { random, floor, } = Math;\n\n\nexport default class Cell {\n\n  constructor (cellNumber, cellType, renderingPosition) {\n    this.cellNumber = cellNumber;\n    this.cellType = cellType;\n    this.renderingPosition = renderingPosition;\n    this.adjacentCells = [];\n    this.entity = null;\n  }\n\n  getEmptyAdjacentCell () {\n    const { adjacentCells, entity: { ENTITY_TYPE, }, } = this;\n    const openCells = adjacentCells.filter(cell => {\n      if (!cell) return false;\n      if (!cell.entity) return true;\n      switch (ENTITY_TYPE) {\n      case ENTITY_HERBIVORE: return cell.entity.ENTITY_TYPE === ENTITY_PLANT;\n        //case ENTITY_CARNIVORE: return cell.entity.ENTITY_TYPE !== ENTITY_CARNIVORE;\n      default: return false;\n      }\n    });\n    return openCells.length\n      ? openCells[floor(random() * openCells.length)]\n      : null;\n  }\n\n  setEntity (entity) {\n    this.entity && this.removeEntity();\n    this.entity = entity;\n    entity.cell = this;\n  }\n\n  removeEntity () {\n    this.entity.cell = null;\n    this.entity = null;\n  }\n\n  update () {\n    this.entity && this.entity.update();\n  }\n\n}\n","import Cell from './Cell';\nimport {\n  Plant,\n  Herbivore,\n} from './Entities';\n\n\nconst { floor, } = Math;\n\n\nexport default class World {\n\n  constructor (width, height) {\n    if (width < 3 || height < 3) {\n      throw new Error('Too small world, must be at least 3x3');\n    }\n    this.width = width;\n    this.height = height;\n    this.dimension = width * height;\n    this.field = [];\n    this.setupFieldCells();\n    // TEMP\n    // REMOVE AFTER\n    this.field[0].setEntity(new Plant());\n    setTimeout(() => {\n      this.field[100].setEntity(new Herbivore());\n    }, 10000);\n  }\n\n  setupFieldCells () {\n    const { field, width, height, dimension, getCellType, } = this;\n    for (let i = 0; i < dimension; i++) {\n      field[i] = new Cell(i, getCellType(i, width, dimension), {\n        // Cell draw position in clipspace\n        x: -1 + 2 * ((i % width * 10 + 5) / 10 / width),\n        y: -1 + 2 * ((floor(i / width) * 10 + 5) / 10 / height),\n      });\n    }\n    for (let i = 0; i < dimension; i++) {\n      // Get adjacent cells\n      const adjacentCells = [];\n      adjacentCells[0] = (field[i - width]) ? field[i - width] : null;\n      adjacentCells[1] = ((i + 1) % width !== 0 && field[i + 1]) ? field[i + 1] : null;\n      adjacentCells[2] = (field[i + width]) ? field[i + width] : null;\n      adjacentCells[3] = (i % width !== 0 && field[i - 1]) ? field[i - 1] : null;\n      field[i].adjacentCells = adjacentCells;\n    }\n  }\n\n  getCellType (i, width, dimension) {\n    if (i === 0) return 'top-left';\n    if (i + 1 === width) return 'top-right';\n    if (i + width === dimension) return 'bottom-left';\n    if (i + 1 === dimension) return 'bottom-right';\n    if (i < width) return 'top';\n    if (i + width + 1 > dimension) return 'bottom';\n    if (i % width === 0) return 'left';\n    if ((i + 1) % width === 0) return 'right';\n    return 'normal';\n  }\n\n  update () {\n    const { field, } = this;\n    for (const cell of field) {\n      cell.update();\n    }\n  }\n\n}\n","const canvas = document.createElement('canvas');\nconst gl = canvas.getContext('webgl2');\ndocument.getElementById('root').appendChild(canvas);\n\n\nconst vss = `#version 300 es\nin vec2 a_position;\nin float a_color;\nin float a_alpha;\nin float a_size;\n\nvec3 getColor () {\n  switch (int(a_color)) {\n    case 0: return vec3(0.0, 1.0, 0.0);\n    case 1: return vec3(1.0, 0.75, 0.8);\n    case 2: return vec3(1.0, 0.0, 0.0);\n    default: return vec3(0.0, 0.0, 0.0);\n  }\n}\n\nout vec4 color;\nvoid main () {\n  color = vec4(getColor(), a_alpha);\n  gl_Position = vec4(a_position.x, -a_position.y, 0.0, 1.0);\n  gl_PointSize = a_size;\n}\n`;\n\n\nconst fss = `#version 300 es\nprecision mediump float;\n\nin vec4 color;\n\nout vec4 fragColor;\nvoid main () {\n  if (color.w == 0.0) {\n    discard;\n  }\n  vec2 cxy = 2.0 * gl_PointCoord - 1.0;\n  float r = dot(cxy, cxy);\n  if (r > 1.0) {\n    discard;\n  }\n  float delta = fwidth(r);\n  float alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\n  fragColor = vec4(color.xyz * alpha, color.w);\n}\n`;\n\n\nconst vs = gl.createShader(gl.VERTEX_SHADER);\nconst fs = gl.createShader(gl.FRAGMENT_SHADER);\ngl.shaderSource(vs, vss);\ngl.shaderSource(fs, fss);\ngl.compileShader(vs);\ngl.compileShader(fs);\nconst verr = gl.getShaderInfoLog(vs);\nconsole.log('vs compile err: ', verr); //eslint-disable-line\nconst ferr = gl.getShaderInfoLog(fs);\nconsole.log('fs compile err: ', ferr); //eslint-disable-line\n\n\nconst program = gl.createProgram();\ngl.attachShader(program, vs);\ngl.attachShader(program, fs);\ngl.linkProgram(program);\ngl.useProgram(program);\n\n\nexport default class Renderer {\n\n  constructor () {\n    this.vertices = [];\n    this.varying = [];\n    this.positionBuffer = gl.createBuffer();\n    this.varyingBuffer = gl.createBuffer();\n    this.vertexAttributes = {\n      a_position: {\n        buffer: this.positionBuffer,\n        attribute: gl.getAttribLocation(program, 'a_position'),\n        type: gl.FLOAT,\n        size: 2,\n        stride: 2 * 4,\n        offset: 0,\n      },\n      a_color: {\n        buffer: this.varyingBuffer,\n        attribute: gl.getAttribLocation(program, 'a_color'),\n        type: gl.FLOAT,\n        size: 1,\n        stride: 3 * 4,\n        offset: 0,\n      },\n      a_alpha: {\n        buffer: this.varyingBuffer,\n        attribute: gl.getAttribLocation(program, 'a_alpha'),\n        type: gl.FLOAT,\n        size: 1,\n        stride: 3 * 4,\n        offset: 1 * 4,\n      },\n      a_size: {\n        buffer: this.varyingBuffer,\n        attribute: gl.getAttribLocation(program, 'a_size'),\n        type: gl.FLOAT,\n        size: 1,\n        stride: 3 * 4,\n        offset: 2 * 4,\n      },\n    };\n  }\n\n  setupWorldRender (world) {\n    canvas.width = world.width * 10;\n    canvas.height = world.height * 10;\n    gl.viewport(0, 0, canvas.width, canvas.height);\n\n    const { vertices, varying, } = this;\n    for (const { renderingPosition, } of world.field) {\n      vertices.push(\n        renderingPosition.x,\n        renderingPosition.y,\n      );\n      varying.push(\n        0.0,\n        0.0,\n        0.0,\n      );\n    }\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.varyingBuffer);\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(varying), gl.DYNAMIC_DRAW);\n\n    for (const { buffer, attribute, size, type, stride, offset, } of Object.values(this.vertexAttributes)) {\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\n      gl.enableVertexAttribArray(attribute);\n      gl.vertexAttribPointer(attribute, size, type, false, stride, offset);\n    }\n    // Varying buffer is left last to be bound. This is important!\n\n    gl.clearColor(0.4, 0.4, 0.4, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  }\n\n  renderWorld ({ field, dimension, }) {\n    gl.clearColor(0.4, 0.4, 0.4, 1.0);\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    const { varying, } = this;\n    for (const { entity, cellNumber, } of field) {\n      const pos = cellNumber * 3;\n      if (entity) {\n        varying[pos + 0] = entity.ENTITY_COLOR;\n        varying[pos + 1] = 1.0\n        varying[pos + 2] = entity.size;\n      } else {\n        varying[pos + 1] = 0.0;\n      }\n    }\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(varying), gl.DYNAMIC_DRAW);\n    gl.drawArrays(gl.POINTS, 0, dimension);\n  }\n\n}\n","const setGlobalStyle = css => {\n  const style = document.createElement('style');\n  style.type = 'text/css';\n  (document.head || document.getElementsByTagName('head')[0]).appendChild(style);\n  if (!css) {\n    css = `\n    * {\n      font-family: 'Ubuntu', sans-serif;\n      margin: 0;\n      padding: 0;\n      box-sizing: border-box;\n      font-size: 16px;\n    }\n    \n    html body {\n      height: 100vh;\n      width: 100vw;\n      overflow: hidden;\n    }\n    \n    #root {\n      width: 100%;\n      height: 100%;\n    }\n    \n    canvas {\n      //width: 100%;\n      //height: 100%;\n      background: gray;\n    }\n    `;\n  }\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\n\nexport default setGlobalStyle;\n","import World from './World';\nimport { Renderer, } from './Renderer';\n\nimport { setGlobalStyle, } from './utility';\n\nsetGlobalStyle(`\n* {\n  font-family: 'Ubuntu', sans-serif;\n  margin: 0;\n  padding: 0;\n  box-sizing: border-box;\n  font-size: 16px;\n}\n\nhtml body {\n  height: 100vh;\n  width: 100vw;\n  overflow: hidden;\n}\n\n#root {\n  width: 100%;\n  height: 100%;\n}\n\ncanvas {\n  //width: 100%;\n  //height: 100%;\n  background: gray;\n}\n`);\n\n\nwindow.addEventListener('keyup', e => {\n  if (e.key === 'p') {\n    updTime += updTime < 20 ? 1 : 0;\n  } else if (e.key === 'o') {\n    updTime -= updTime > 0 ? 1 : 0;\n  }\n}, false)\nlet updTime = 3;\n\nconst world = new World(190, 75);\nconst renderer = new Renderer();\nrenderer.setupWorldRender(world);\n//renderer.renderWorld(world);\nconst frame = () => { // eslint-disable-line\n  requestAnimationFrame(frame);\n  for (let i = 0; i < updTime; i++)\n    world.update();\n  renderer.renderWorld(world);\n}\nrequestAnimationFrame(frame);\n//setInterval(frame, 1000);\n"],"sourceRoot":""}