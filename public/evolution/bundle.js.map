{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./public/evolution/src/Entities/Entity.js","webpack:///./public/evolution/src/Entities/Plant.js","webpack:///./public/evolution/src/Entities/Herbivore.js","webpack:///./public/evolution/src/Entities/index.js","webpack:///./public/evolution/src/Cell.js","webpack:///./public/evolution/src/World.js","webpack:///./public/evolution/src/Renderer/Renderer.js","webpack:///./public/evolution/src/utility/setGlobalStyle.js","webpack:///./public/evolution/src/app.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","Entity","constructor","this","cell","die","removeEntity","random","floor","Math","randomize","min","max","ENTITY_TYPE","Plant","super","size","timeToLive","TIME_TO_LIVE_MIN","TIME_TO_LIVE_MAX","timeToCanGrow","TIME_TO_GROW_MIN","TIME_TO_GROW_MAX","timeToCanBreed","TIME_TO_BREED_MIN","TIME_TO_BREED_MAX","grow","ENTITY_MAX_SIZE","breed","breedTo","getEmptyAdjacentCell","setEntity","SHRINK_ON_BREED","update","ENTITY_COLOR","SIZE_TO_BREED","Herbivore_random","Herbivore","satiation","timeToCanMove","TIME_TO_MOVE_MIN","TIME_TO_MOVE_MAX","timeToSatiationDecrease","TIME_SATIATION_DECREASE_MIN","TIME_SATIATION_DECREASE_MAX","direction","getHungrier","findFood","closest","Infinity","distance","nextCell","adjacentCells","entity","ENTITY_PLANT","move","eat","moveEntityTo","SATIATION_TO_EAT","entityTypes","ENTITY_HERBIVORE","Cell_random","Cell","cellNumber","cellType","renderingPosition","openCells","filter","length","canvas","document","createElement","gl","getContext","getElementById","appendChild","vs","createShader","VERTEX_SHADER","fs","FRAGMENT_SHADER","shaderSource","compileShader","verr","getShaderInfoLog","console","log","ferr","program","createProgram","attachShader","linkProgram","useProgram","css","style","type","head","getElementsByTagName","styleSheet","cssText","createTextNode","setGlobalStyle","window","addEventListener","e","updTime","world","width","height","Error","dimension","field","setupFieldCells","setTimeout","getCellType","x","y","push","renderer","vertices","varying","positionBuffer","createBuffer","varyingBuffer","vertexAttributes","a_position","buffer","attribute","getAttribLocation","FLOAT","stride","offset","a_color","a_alpha","a_size","setupWorldRender","viewport","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","DYNAMIC_DRAW","values","enableVertexAttribArray","vertexAttribPointer","renderWorld","clearColor","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","pos","drawArrays","POINTS","frame","requestAnimationFrame"],"mappings":"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","file":"evolution/bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 57);\n","export default class Entity {\r\n\r\n  constructor () {\r\n    this.cell = null;\r\n  }\r\n\r\n  die () {\r\n    this.cell.removeEntity();\r\n  }\r\n\r\n}\r\n","import Entity from './Entity';\r\n\r\n\r\nconst { random, floor, } = Math;\r\nconst randomize = (min, max) => floor(random() * (max - min)) + min;\r\n\r\n\r\nexport const ENTITY_TYPE = 'ENTITY_PLANT';\r\n\r\n\r\nexport default class Plant extends Entity {\r\n\r\n  constructor () {\r\n    super();\r\n    this.size = 2;\r\n    this.timeToLive = randomize(this.TIME_TO_LIVE_MIN, this.TIME_TO_LIVE_MAX);\r\n    this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\r\n    this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\r\n  }\r\n\r\n  grow () {\r\n    if (this.size < this.ENTITY_MAX_SIZE) {\r\n      this.size++;\r\n      this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\r\n    }\r\n  }\r\n\r\n  breed () {\r\n    const breedTo = this.cell.getEmptyAdjacentCell();\r\n    if (breedTo) {\r\n      breedTo.setEntity(new this.constructor());\r\n      this.size -= this.SHRINK_ON_BREED;\r\n      this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\r\n    }\r\n  }\r\n\r\n  update () {\r\n    if (--this.timeToLive <= 0) return this.die();\r\n    this.timeToCanGrow <= 0 ? this.grow() : this.timeToCanGrow--;\r\n    this.timeToCanBreed <= 0 ? this.breed() : this.timeToCanBreed--;\r\n  }\r\n\r\n}\r\n\r\nPlant.prototype.ENTITY_TYPE = ENTITY_TYPE;\r\nPlant.prototype.ENTITY_COLOR = 0;\r\nPlant.prototype.TIME_TO_LIVE_MIN = 800;\r\nPlant.prototype.TIME_TO_LIVE_MAX = 1000;\r\nPlant.prototype.TIME_TO_GROW_MIN = 10;//80;\r\nPlant.prototype.TIME_TO_GROW_MAX = 20;//120;\r\nPlant.prototype.TIME_TO_BREED_MIN = 50;//100;\r\nPlant.prototype.TIME_TO_BREED_MAX = 100;//500;\r\n\r\nPlant.prototype.ENTITY_MAX_SIZE = 10;\r\nPlant.prototype.SIZE_TO_BREED = 6;\r\nPlant.prototype.SHRINK_ON_BREED = 4;\r\n","import Entity from './Entity';\r\nimport { ENTITY_TYPE as ENTITY_PLANT, } from './Plant';\r\n\r\n\r\nconst { random, floor, } = Math;\r\nconst randomize = (min, max) => floor(random() * (max - min)) + min;\r\n\r\n\r\nexport const ENTITY_TYPE = 'ENTITY_HERBIVORE';\r\n\r\n\r\nexport default class Herbivore extends Entity {\r\n\r\n  constructor () {\r\n    super();\r\n    this.size = 2;\r\n    this.satiation = 3;\r\n    this.timeToLive = randomize(this.TIME_TO_LIVE_MIN, this.TIME_TO_LIVE_MAX);\r\n    this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\r\n    this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\r\n    this.timeToCanMove = randomize(this.TIME_TO_MOVE_MIN, this.TIME_TO_MOVE_MAX);\r\n    this.timeToSatiationDecrease = randomize(this.TIME_SATIATION_DECREASE_MIN, this.TIME_SATIATION_DECREASE_MAX);\r\n\r\n    this.direction = null;\r\n  }\r\n\r\n  getHungrier () {\r\n    this.satiation--;\r\n    if (this.satiation <= 0) {\r\n      this.timeToLive = 0;\r\n      return;\r\n    }\r\n    this.timeToSatiationDecrease = randomize(this.TIME_SATIATION_DECREASE_MIN, this.TIME_SATIATION_DECREASE_MAX);\r\n  }\r\n\r\n  findFood () {\r\n    let direction = null;\r\n    let closest = Infinity;\r\n    for (let i = 0; i < 4; i++) {\r\n      let distance = 1;\r\n      let nextCell = this.cell.adjacentCells[i];\r\n      if (!nextCell) continue;\r\n      while ((nextCell = nextCell.adjacentCells[i])) {\r\n        distance++;\r\n        if (!nextCell.entity) continue;\r\n        if (nextCell.entity.ENTITY_TYPE !== ENTITY_PLANT) break;\r\n        if (distance < closest) {\r\n          closest = distance\r\n          direction = i;\r\n        }\r\n      }\r\n    }\r\n    if (closest < Infinity) return direction;\r\n  }\r\n\r\n  move () {\r\n    const nextCell = this.cell.adjacentCells[this.direction];\r\n    if (!nextCell) {\r\n      this.direction = null;\r\n    } else if (!nextCell.entity) {\r\n      this.cell.moveEntityTo(nextCell);\r\n    } else if (nextCell.entity.ENTITY_TYPE === ENTITY_PLANT) {\r\n      this.eat(nextCell);\r\n    }\r\n  }\r\n\r\n  eat (cell) {\r\n    this.satiation += floor(cell.entity.size / 3) + 1;\r\n    this.timeToSatiationDecrease = randomize(this.TIME_SATIATION_DECREASE_MIN, this.TIME_SATIATION_DECREASE_MAX);\r\n    this.cell.moveEntityTo(cell);\r\n    this.direction = null;\r\n  }\r\n\r\n  grow () {\r\n    if (this.size >= this.ENTITY_MAX_SIZE) return;\r\n    this.size++;\r\n    this.timeToCanGrow = randomize(this.TIME_TO_GROW_MIN, this.TIME_TO_GROW_MAX);\r\n  }\r\n\r\n  breed () {\r\n    const breedTo = this.cell.getEmptyAdjacentCell();\r\n    if (!breedTo) return;\r\n    breedTo.setEntity(new this.constructor());\r\n    this.size -= this.SHRINK_ON_BREED;\r\n    this.timeToCanBreed = randomize(this.TIME_TO_BREED_MIN, this.TIME_TO_BREED_MAX);\r\n  }\r\n\r\n  update () {\r\n    this.timeToSatiationDecrease <= 0 ? this.getHungrier() : this.timeToSatiationDecrease--;\r\n    if (--this.timeToLive <= 0) return this.die(); // Checks before this line may cause death to the entity\r\n    \r\n    this.timeToCanGrow <= 0 ? this.grow() : this.timeToCanGrow--;\r\n    this.timeToCanBreed <= 0 ? this.breed() : this.timeToCanBreed--;\r\n    this.timeToCanMove > 0 && this.timeToCanMove--;\r\n    \r\n    if (this.satiation <= this.SATIATION_TO_EAT) {\r\n      if (!this.direction) {\r\n        this.direction = this.findFood();\r\n      }\r\n      this.timeToCanMove <= 0 && this.move();\r\n    }\r\n  }\r\n\r\n}\r\n\r\nHerbivore.prototype.ENTITY_TYPE = ENTITY_TYPE;\r\nHerbivore.prototype.ENTITY_COLOR = 1;\r\nHerbivore.prototype.TIME_TO_LIVE_MIN = 3000;\r\nHerbivore.prototype.TIME_TO_LIVE_MAX = 3500;\r\nHerbivore.prototype.TIME_TO_GROW_MIN = 100;\r\nHerbivore.prototype.TIME_TO_GROW_MAX = 140;\r\nHerbivore.prototype.TIME_TO_BREED_MIN = 600;\r\nHerbivore.prototype.TIME_TO_BREED_MAX = 800;\r\nHerbivore.prototype.TIME_TO_MOVE_MIN = 40;\r\nHerbivore.prototype.TIME_TO_MOVE_MAX = 50;\r\nHerbivore.prototype.TIME_SATIATION_DECREASE_MIN = 80;\r\nHerbivore.prototype.TIME_SATIATION_DECREASE_MAX = 100;\r\n\r\nHerbivore.prototype.SATIATION_TO_EAT = 8;\r\n\r\nHerbivore.prototype.ENTITY_MAX_SIZE = 10;\r\nHerbivore.prototype.SIZE_TO_BREED = 8;\r\nHerbivore.prototype.SHRINK_ON_BREED = 5;\r\n","export { default as Plant, } from './Plant'\r\nexport { default as Herbivore, } from './Herbivore'\r\n//export { default as Carnivore, } from './Carnivore'\r\n\r\n\r\nimport { ENTITY_TYPE as ENTITY_PLANT, } from './Plant';\r\nimport { ENTITY_TYPE as ENTITY_HERBIVORE, } from './Herbivore';\r\n//import { ENTITY_TYPE as ENTITY_CARNIVORE, } from './Carnivore';\r\n\r\n\r\nexport const entityTypes = {\r\n  ENTITY_PLANT,\r\n  ENTITY_HERBIVORE,\r\n  //ENTITY_CARNIVORE,\r\n};\r\n","import { entityTypes, } from './Entities';\r\nconst {\r\n  ENTITY_PLANT,\r\n  ENTITY_HERBIVORE,\r\n  //ENTITY_CARNIVORE,\r\n} = entityTypes;\r\n\r\n\r\nconst { random, floor, } = Math;\r\n\r\n\r\nexport default class Cell {\r\n\r\n  constructor (cellNumber, cellType, renderingPosition) {\r\n    this.cellNumber = cellNumber;\r\n    this.cellType = cellType;\r\n    this.renderingPosition = renderingPosition;\r\n    this.adjacentCells = [];\r\n    this.entity = null;\r\n  }\r\n\r\n  getEmptyAdjacentCell () {\r\n    const { adjacentCells, entity: { ENTITY_TYPE, }, } = this;\r\n    const openCells = adjacentCells.filter(cell => {\r\n      if (!cell) return false;\r\n      if (!cell.entity) return true;\r\n      switch (ENTITY_TYPE) {\r\n      case ENTITY_HERBIVORE: return cell.entity.ENTITY_TYPE === ENTITY_PLANT;\r\n      //case ENTITY_CARNIVORE: return cell.entity.ENTITY_TYPE !== ENTITY_CARNIVORE;\r\n      default: return false;\r\n      }\r\n    });\r\n    return openCells.length\r\n      ? openCells[floor(random() * openCells.length)]\r\n      : null;\r\n  }\r\n  \r\n  moveEntityTo (cell) {\r\n    const entity = this.entity;\r\n    this.removeEntity();\r\n    cell.setEntity(entity);\r\n  }\r\n\r\n  setEntity (entity) {\r\n    this.entity && this.removeEntity();\r\n    entity.cell = this;\r\n    this.entity = entity;\r\n  }\r\n\r\n  removeEntity () {\r\n    this.entity.cell = null;\r\n    this.entity = null;\r\n  }\r\n\r\n  update () {\r\n    this.entity && this.entity.update();\r\n  }\r\n\r\n}\r\n","import Cell from './Cell';\r\nimport {\r\n  Plant,\r\n  Herbivore,\r\n} from './Entities';\r\n\r\n\r\nconst { floor, } = Math;\r\n\r\n\r\nexport default class World {\r\n\r\n  constructor (width, height) {\r\n    if (width < 3 || height < 3) {\r\n      throw new Error('Too small world, must be at least 3x3');\r\n    }\r\n    this.width = width;\r\n    this.height = height;\r\n    this.dimension = width * height;\r\n    this.field = [];\r\n    this.setupFieldCells();\r\n    // TEMP\r\n    // REMOVE AFTER\r\n    this.field[0].setEntity(new Plant());\r\n    setTimeout(() => {\r\n      this.field[100].setEntity(new Herbivore());\r\n    }, 10000);\r\n  }\r\n\r\n  setupFieldCells () {\r\n    const { field, width, height, dimension, getCellType, } = this;\r\n    for (let i = 0; i < dimension; i++) {\r\n      field[i] = new Cell(i, getCellType(i, width, dimension), {\r\n        // Cell draw position in clipspace\r\n        x: -1 + 2 * ((i % width * 10 + 5) / 10 / width),\r\n        y: -1 + 2 * ((floor(i / width) * 10 + 5) / 10 / height),\r\n      });\r\n    }\r\n    for (let i = 0; i < dimension; i++) {\r\n      // Set adjacent cells\r\n      field[i].adjacentCells.push(\r\n        field[i - width] ? field[i - width] : null,\r\n        (i + 1) % width !== 0 && field[i + 1] ? field[i + 1] : null,\r\n        field[i + width] ? field[i + width] : null,\r\n        i % width !== 0 && field[i - 1] ? field[i - 1] : null,\r\n      );\r\n    }\r\n  }\r\n\r\n  getCellType (i, width, dimension) {\r\n    if (i === 0) return 'top-left';\r\n    if (i + 1 === width) return 'top-right';\r\n    if (i + width === dimension) return 'bottom-left';\r\n    if (i + 1 === dimension) return 'bottom-right';\r\n    if (i < width) return 'top';\r\n    if (i + width + 1 > dimension) return 'bottom';\r\n    if (i % width === 0) return 'left';\r\n    if ((i + 1) % width === 0) return 'right';\r\n    return 'normal';\r\n  }\r\n\r\n  update () {\r\n    const { field, } = this;\r\n    for (const cell of field) {\r\n      cell.update();\r\n    }\r\n  }\r\n\r\n}\r\n","const canvas = document.createElement('canvas');\r\nconst gl = canvas.getContext('webgl2');\r\ndocument.getElementById('root').appendChild(canvas);\r\n\r\n\r\nconst vss = `#version 300 es\r\nin vec2 a_position;\r\nin float a_color;\r\nin float a_alpha;\r\nin float a_size;\r\n\r\nvec3 getColor () {\r\n  switch (int(a_color)) {\r\n    case 0: return vec3(0.0, 1.0, 0.0);\r\n    case 1: return vec3(1.0, 0.75, 0.8);\r\n    case 2: return vec3(1.0, 0.0, 0.0);\r\n    default: return vec3(0.0, 0.0, 0.0);\r\n  }\r\n}\r\n\r\nout vec4 color;\r\nvoid main () {\r\n  color = vec4(getColor(), a_alpha);\r\n  gl_Position = vec4(a_position.x, -a_position.y, 0.0, 1.0);\r\n  gl_PointSize = a_size;\r\n}\r\n`;\r\n\r\n\r\nconst fss = `#version 300 es\r\nprecision mediump float;\r\n\r\nin vec4 color;\r\n\r\nout vec4 fragColor;\r\nvoid main () {\r\n  if (color.w == 0.0) {\r\n    discard;\r\n  }\r\n  vec2 cxy = 2.0 * gl_PointCoord - 1.0;\r\n  float r = dot(cxy, cxy);\r\n  if (r > 1.0) {\r\n    discard;\r\n  }\r\n  float delta = fwidth(r);\r\n  float alpha = 1.0 - smoothstep(1.0 - delta, 1.0 + delta, r);\r\n  fragColor = vec4(color.xyz * alpha, color.w);\r\n}\r\n`;\r\n\r\n\r\nconst vs = gl.createShader(gl.VERTEX_SHADER);\r\nconst fs = gl.createShader(gl.FRAGMENT_SHADER);\r\ngl.shaderSource(vs, vss);\r\ngl.shaderSource(fs, fss);\r\ngl.compileShader(vs);\r\ngl.compileShader(fs);\r\nconst verr = gl.getShaderInfoLog(vs);\r\nconsole.log('vs compile err: ', verr); //eslint-disable-line\r\nconst ferr = gl.getShaderInfoLog(fs);\r\nconsole.log('fs compile err: ', ferr); //eslint-disable-line\r\n\r\n\r\nconst program = gl.createProgram();\r\ngl.attachShader(program, vs);\r\ngl.attachShader(program, fs);\r\ngl.linkProgram(program);\r\ngl.useProgram(program);\r\n\r\n\r\nexport default class Renderer {\r\n\r\n  constructor () {\r\n    this.vertices = [];\r\n    this.varying = [];\r\n    this.positionBuffer = gl.createBuffer();\r\n    this.varyingBuffer = gl.createBuffer();\r\n    this.vertexAttributes = {\r\n      a_position: {\r\n        buffer: this.positionBuffer,\r\n        attribute: gl.getAttribLocation(program, 'a_position'),\r\n        type: gl.FLOAT,\r\n        size: 2,\r\n        stride: 2 * 4,\r\n        offset: 0,\r\n      },\r\n      a_color: {\r\n        buffer: this.varyingBuffer,\r\n        attribute: gl.getAttribLocation(program, 'a_color'),\r\n        type: gl.FLOAT,\r\n        size: 1,\r\n        stride: 3 * 4,\r\n        offset: 0,\r\n      },\r\n      a_alpha: {\r\n        buffer: this.varyingBuffer,\r\n        attribute: gl.getAttribLocation(program, 'a_alpha'),\r\n        type: gl.FLOAT,\r\n        size: 1,\r\n        stride: 3 * 4,\r\n        offset: 1 * 4,\r\n      },\r\n      a_size: {\r\n        buffer: this.varyingBuffer,\r\n        attribute: gl.getAttribLocation(program, 'a_size'),\r\n        type: gl.FLOAT,\r\n        size: 1,\r\n        stride: 3 * 4,\r\n        offset: 2 * 4,\r\n      },\r\n    };\r\n  }\r\n\r\n  setupWorldRender ({ width, height, field, }) {\r\n    canvas.width = width * 10;\r\n    canvas.height = height * 10;\r\n    gl.viewport(0, 0, canvas.width, canvas.height);\r\n\r\n    const { vertices, varying, } = this;\r\n    for (const { renderingPosition, } of field) {\r\n      vertices.push(\r\n        renderingPosition.x,\r\n        renderingPosition.y,\r\n      );\r\n      varying.push(\r\n        0.0,\r\n        0.0,\r\n        0.0,\r\n      );\r\n    }\r\n\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.positionBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\r\n\r\n    // Varying buffer is left last to be bound. This is important!\r\n    gl.bindBuffer(gl.ARRAY_BUFFER, this.varyingBuffer);\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(varying), gl.DYNAMIC_DRAW);\r\n\r\n    for (const { buffer, attribute, size, type, stride, offset, } of Object.values(this.vertexAttributes)) {\r\n      gl.bindBuffer(gl.ARRAY_BUFFER, buffer);\r\n      gl.enableVertexAttribArray(attribute);\r\n      gl.vertexAttribPointer(attribute, size, type, false, stride, offset);\r\n    }\r\n  }\r\n\r\n  renderWorld ({ field, dimension, }) {\r\n    gl.clearColor(0.4, 0.4, 0.4, 1.0);\r\n    gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\r\n    const { varying, } = this;\r\n    for (const { entity, cellNumber, } of field) {\r\n      const pos = cellNumber * 3;\r\n      if (entity) {\r\n        varying[pos + 0] = entity.ENTITY_COLOR;\r\n        varying[pos + 1] = 1.0\r\n        varying[pos + 2] = entity.size;\r\n      } else {\r\n        varying[pos + 1] = 0.0;\r\n      }\r\n    }\r\n    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(varying), gl.DYNAMIC_DRAW);\r\n    gl.drawArrays(gl.POINTS, 0, dimension);\r\n  }\r\n\r\n}\r\n","const setGlobalStyle = css => {\r\n  const style = document.createElement('style');\r\n  style.type = 'text/css';\r\n  (document.head || document.getElementsByTagName('head')[0]).appendChild(style);\r\n  if (!css) {\r\n    css = `\r\n    * {\r\n      font-family: 'Ubuntu', sans-serif;\r\n      margin: 0;\r\n      padding: 0;\r\n      box-sizing: border-box;\r\n      font-size: 16px;\r\n    }\r\n    \r\n    html body {\r\n      height: 100vh;\r\n      width: 100vw;\r\n      overflow: hidden;\r\n    }\r\n    \r\n    #root {\r\n      width: 100%;\r\n      height: 100%;\r\n    }\r\n    \r\n    canvas {\r\n      //width: 100%;\r\n      //height: 100%;\r\n      background: gray;\r\n    }\r\n    `;\r\n  }\r\n  if (style.styleSheet) {\r\n    style.styleSheet.cssText = css;\r\n  } else {\r\n    style.appendChild(document.createTextNode(css));\r\n  }\r\n}\r\n\r\n\r\nexport default setGlobalStyle;\r\n","import World from './World';\r\nimport { Renderer, } from './Renderer';\r\n\r\nimport { setGlobalStyle, } from './utility';\r\n\r\nsetGlobalStyle(`\r\n* {\r\n  font-family: 'Ubuntu', sans-serif;\r\n  margin: 0;\r\n  padding: 0;\r\n  box-sizing: border-box;\r\n  font-size: 16px;\r\n}\r\n\r\nhtml body {\r\n  height: 100vh;\r\n  width: 100vw;\r\n  overflow: hidden;\r\n}\r\n\r\n#root {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n\r\ncanvas {\r\n  //width: 100%;\r\n  //height: 100%;\r\n  background: gray;\r\n}\r\n`);\r\n\r\n\r\nwindow.addEventListener('keyup', e => {\r\n  if (e.key === 'p') {\r\n    updTime += updTime < 20 ? 1 : 0;\r\n  } else if (e.key === 'o') {\r\n    updTime -= updTime > 0 ? 1 : 0;\r\n  }\r\n}, false)\r\nlet updTime = 3;\r\n\r\nconst world = new World(/*190, 75*/50, 50);\r\nconst renderer = new Renderer();\r\nrenderer.setupWorldRender(world);\r\n//renderer.renderWorld(world);\r\nconst frame = () => { // eslint-disable-line\r\n  requestAnimationFrame(frame);\r\n  for (let i = 0; i < updTime; i++)\r\n    world.update();\r\n  renderer.renderWorld(world);\r\n}\r\nrequestAnimationFrame(frame);\r\n//setInterval(frame, 1000);\r\n"],"sourceRoot":""}